bb_legend(position = "right") %>%
bb_tooltip(grouped = FALSE) %>%
bb_title(padding = list(bottom = 20, top = 10), position = "top-left")
rad_scale <- function(x, max_rad = 25) {
s <- sqrt(x)
s / max(s) * max_rad
}
map_lbllr <- function(name, rate_10k, cases) {
paste(
htmltools::h5(name),
htmltools::div(str_glue("Rate: {rate_10k} per 10k")),
htmltools::div(str_glue("{cases} cases"))
) %>%
htmltools::htmlEscape()
}
map_thresh <- 10
town_sf <- readRDS("input_data/town_sf.rds")
cases_sf <- town_sf %>%
left_join(town %>% filter(date == date_range[2]), by = c("name" = "town")) %>%
left_join(pops %>% select(name, total_pop), by = "name") %>%
mutate(rate_10k = round(cases / total_pop * 1e4, digits = 1))
bbox <- town_sf %>%
sf::st_buffer(1e-2) %>%
sf::st_bbox() %>%
as.numeric()
# color_scale <- colorBin(seq_pal, cases_sf$rate_10k, bins = 5)
leaflet(cases_sf, width = "100%", height = 500,
options = leafletOptions(zoomSnap = 0.25, zoomDelta = 0.5, scrollWheelZoom = FALSE)) %>%
setMaxBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = "#999999", fillColor = "#aaaaaa", weight = 1, fillOpacity = 0.1) %>%
addCircleMarkers(data = sf::st_centroid(cases_sf),
radius = ~rad_scale(rate_10k), color = seq_pal[5],
weight = 0, opacity = 0.8, fillOpacity = 0.4,
# label = ~str_glue("{name}: {rate_10k}"),
label = ~str_glue("{name}: {rate_10k} per 10k ({cases} cases)"),
labelOptions = labelOptions(className = "tooltip", direction = "top", offset = c(0, -20)))
chor_brks <- ceiling(classInt::classIntervals(cases_sf$rate_10k, n = 5, style = "jenks")$brk)
chor_pal <- colorBin(RColorBrewer::brewer.pal(5, "BuPu"), domain = cases_sf$rate_10k, bins = chor_brks)
leaflet(cases_sf, width = "100%", height = 500,
options = leafletOptions(zoomSnap = 0.25, zoomDelta = 0.5, scrollWheelZoom = FALSE)) %>%
setMaxBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = "#333333", weight = 0.6, fillOpacity = 0.8,
fillColor = ~chor_pal(rate_10k),
label = ~str_glue("{name}: {rate_10k} per 10k ({cases} cases)"),
labelOptions = labelOptions(className = "tooltip", direction = "top", offset = c(0, -20)),
highlightOptions = highlightOptions(fillOpacity = 1, bringToFront = TRUE, weight = 2)) %>%
addLegend("bottomright", pal = chor_pal, values = ~rate_10k, opacity = 0.9, title = "Rate per 10k")
test_x_cases <- county %>%
inner_join(tests, by = c("name", "date")) %>%
# filter(date == date_range[2]) %>%
select(-level) %>%
pivot_longer(-c(date, name), names_to = "measure") %>%
mutate(measure = as_factor(measure) %>%
fct_relevel("tests", "cases", "hospitalizations") %>%
fct_recode("detected cases" = "cases", "individuals tested" = "tests") %>%
fct_relabel(str_to_sentence)) %>%
filter(!is.na(value)) %>%
arrange(measure)
billboarder(data = test_x_cases, height = 450) %>%
bb_linechart(mapping = bbaes(x = date, y = value, group = measure), type = "step") %>%
bb_x_axis(label = list(text = NULL), type = "timeseries",
tick = list(format = "%m/%d", values = mondays)) %>%
bb_y_axis(label = list(text = "Count", position = "outer-top"),
tick = list(format = htmlwidgets::JS("d3.format(',')")),
padding = list(bottom = 0)) %>%
bb_x_grid(show = TRUE) %>%
bb_y_grid(show = TRUE) %>%
bb_colors_manual(purrr::set_names(pal[2:5], levels(test_x_cases$measure))) %>%
bb_legend(position = "right") %>%
# bb_tooltip(grouped = FALSE) %>%
bb_title(padding = list(bottom = 20, top = 10), position = "top-left")
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
echo = FALSE,
dpi = 300
)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(lubridate)
library(billboarder)
library(knitr)
library(leaflet)
library(DT)
library(htmltools)
library(forcats)
library(purrr)
source("scripts/plotting_utils.R")
counties <- readRDS("input_data/counties.rds")
town_county <- readRDS("input_data/town_county_xwalk.rds")
county <- read_csv("input_data/covid_ct_county_detailed.csv") %>%
select(name:deaths) %>%
mutate(date = mdy(date),
name = as_factor(name),
level = name %>%
fct_collapse(state = "Connecticut", county = counties, other_level = "noid") %>%
fct_relevel("state"))
town <- read_csv("input_data/covid_ct_town.csv") %>%
pivot_longer(-Town, names_to = "Date", values_to = "Cases") %>%
mutate(Date = mdy(Date)) %>%
janitor::clean_names()
tests <- read_csv("input_data/covid_tests.csv") %>%
mutate(date = mdy(date),
name = "Connecticut")
date_range <- range(county$date)
date_range_fmt <- format(date_range, "%m/%d/%Y")
town_latest <- max(town$date)
town_latest_fmt <- format(town_latest, "%m/%d/%Y")
test_date_range <- range(tests$date)
test_date_range_fmt <- format(test_date_range, "%m/%d/%Y")
pops <- read_csv("input_data/total_pop_2018.csv")
set.seed(1)
pal <- c("gray20", rcartocolor::carto_pal(9, "Vivid")[sample.int(8)]) %>%
purrr::set_names(c("Connecticut", counties))
seq_pal <- rcartocolor::carto_pal(5, "SunsetDark")
set_theme("insight")
county_to_plot <- county %>%
filter(name %in% c("Connecticut", counties)) %>%
mutate(name = as_factor(name) %>% fct_reorder2(date, cases, .desc = FALSE),
lbl = str_glue("{name}: {scales::comma(cases)}"))
mondays <- seq(date_range[1], date_range[2], by = 1) %>%
floor_date(unit = "week", week_start = 1) %>%
unique()
# only showing places with at least X number of cases
reg_thresh <- 50
counts_table <- bind_rows(
county %>%
select(level, name, date, cases) %>%
mutate(name = fct_relabel(name, ~ifelse(. %in% counties, paste(., "County"), .))),
town %>%
select(name = town, date, cases) %>%
mutate(level = "town")
) %>%
filter(date == date_range[2], cases >= reg_thresh, level != "noid") %>%
mutate(level = as_factor(level) %>%
fct_relevel("state", "county", "town", "noid")) %>%
left_join(town_county, by = c("name" = "town")) %>%
left_join(pops %>% select(-level), by = "name") %>%
# replace_na(list(county = "N/A")) %>%
mutate(`Cases per 10k residents` = round(cases / total_pop * 1e4, digits = 1)) %>%
arrange(level, county, name) %>%
select(county, name, cases, `Cases per 10k residents`) %>%
rename_all(str_to_sentence)
datatable(counts_table,
options = list(searching = FALSE, rowGroup = list(dataSrc = 0, emptyDataGroup = "State / counties")),
rownames = FALSE) %>%
formatRound("Cases", digits = 0) %>%
formatRound(4, digits = 1)
pop_race <- read_csv("input_data/race18.csv") %>%
select(name, race, total_pop = estimate)
case_by_race <- read_csv("input_data/covid_ct_race.csv") %>%
mutate(race = as_factor(race) %>%
fct_relabel(str_remove, "NH ") %>%
fct_recode(Latino = "Hispanic"),
date = mdy(date),
name = "Connecticut") %>%
inner_join(pop_race, by = c("name", "race")) %>%
filter(date == max(date))
race_date <- unique(case_by_race$date)
race_date_fmt <- format(race_date, "%m/%d/%Y")
rates_by_race <- bind_rows(
case_by_race %>% mutate(race = "Average"),
case_by_race
) %>%
group_by(name, date, race) %>%
summarise_at(vars(cases, deaths, total_pop), sum) %>%
mutate_at(vars(cases, deaths), list(rate_10k = ~round(. / total_pop * 1e4, digits = 1))) %>%
ungroup() %>%
filter(race != "Other") %>%
mutate(race = as_factor(race) %>%
fct_reorder(cases_rate_10k, .desc = TRUE) %>%
fct_relevel("Average")) %>%
arrange(race)
race_pal <- setNames(c("#888888", pal[c(2, 4, 9, 3)]), levels(rates_by_race$race))
billboarder(data = rates_by_race, height = 350) %>%
bb_barchart(mapping = bbaes(x = race, y = cases_rate_10k, group = race), stack = TRUE, width = list(ratio = 0.5)) %>%
bb_colors_manual(race_pal) %>%
bb_legend(hide = TRUE) %>%
bb_y_axis(label = list(text = "Cases per 10k", position = "outer-top"))
billboarder(list(), data = rates_by_race, height = 350) %>%
bb_barchart(mapping = bbaes(x = race, y = deaths_rate_10k, group = race), stack = TRUE, width = list(ratio = 0.5)) %>%
bb_colors_manual(race_pal) %>%
bb_legend(hide = TRUE) %>%
bb_y_axis(label = list(text = "Deaths per 10k", position = "outer-top"))
county_to_plot %>%
filter(name != "Connecticut") %>%
arrange(date, name) %>%
billboarder(list(data = list(order = "asc")), data = ., height = 400) %>%
bb_barchart(mapping = bbaes(x = date, y = cases, group = name), stacked = TRUE) %>%
bb_x_axis(label = list(text = NULL), type = "timeseries",
tick = list(format = "%m/%d", values = mondays)) %>%
bb_y_axis(label = list(text = "Cases", position = "outer-top"),
tick = list(format = htmlwidgets::JS("d3.format(',')"))) %>%
bb_x_grid(show = TRUE) %>%
bb_y_grid(show = TRUE) %>%
bb_colors_manual(pal) %>%
bb_legend(position = "right") %>%
bb_tooltip(grouped = FALSE) %>%
bb_title(padding = list(bottom = 20, top = 10), position = "top-left")
rad_scale <- function(x, max_rad = 25) {
s <- sqrt(x)
s / max(s) * max_rad
}
map_lbllr <- function(name, rate_10k, cases) {
paste(
htmltools::h5(name),
htmltools::div(str_glue("Rate: {rate_10k} per 10k")),
htmltools::div(str_glue("{cases} cases"))
) %>%
htmltools::htmlEscape()
}
map_thresh <- 10
town_sf <- readRDS("input_data/town_sf.rds")
cases_sf <- town_sf %>%
left_join(town %>% filter(date == date_range[2]), by = c("name" = "town")) %>%
left_join(pops %>% select(name, total_pop), by = "name") %>%
mutate(rate_10k = round(cases / total_pop * 1e4, digits = 1))
town_sf
town_sf %>% st_as_sf()
town_sf %>% sf::st_as_sf()
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
echo = FALSE,
dpi = 300
)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(lubridate)
library(billboarder)
library(knitr)
library(leaflet)
library(DT)
library(htmltools)
library(forcats)
library(purrr)
library(sf)
source("scripts/plotting_utils.R")
counties <- readRDS("input_data/counties.rds")
town_county <- readRDS("input_data/town_county_xwalk.rds")
county <- read_csv("input_data/covid_ct_county_detailed.csv") %>%
select(name:deaths) %>%
mutate(date = mdy(date),
name = as_factor(name),
level = name %>%
fct_collapse(state = "Connecticut", county = counties, other_level = "noid") %>%
fct_relevel("state"))
town <- read_csv("input_data/covid_ct_town.csv") %>%
pivot_longer(-Town, names_to = "Date", values_to = "Cases") %>%
mutate(Date = mdy(Date)) %>%
janitor::clean_names()
tests <- read_csv("input_data/covid_tests.csv") %>%
mutate(date = mdy(date),
name = "Connecticut")
date_range <- range(county$date)
date_range_fmt <- format(date_range, "%m/%d/%Y")
town_latest <- max(town$date)
town_latest_fmt <- format(town_latest, "%m/%d/%Y")
test_date_range <- range(tests$date)
test_date_range_fmt <- format(test_date_range, "%m/%d/%Y")
pops <- read_csv("input_data/total_pop_2018.csv")
set.seed(1)
pal <- c("gray20", rcartocolor::carto_pal(9, "Vivid")[sample.int(8)]) %>%
purrr::set_names(c("Connecticut", counties))
seq_pal <- rcartocolor::carto_pal(5, "SunsetDark")
set_theme("insight")
county_to_plot <- county %>%
filter(name %in% c("Connecticut", counties)) %>%
mutate(name = as_factor(name) %>% fct_reorder2(date, cases, .desc = FALSE),
lbl = str_glue("{name}: {scales::comma(cases)}"))
mondays <- seq(date_range[1], date_range[2], by = 1) %>%
floor_date(unit = "week", week_start = 1) %>%
unique()
# only showing places with at least X number of cases
reg_thresh <- 50
counts_table <- bind_rows(
county %>%
select(level, name, date, cases) %>%
mutate(name = fct_relabel(name, ~ifelse(. %in% counties, paste(., "County"), .))),
town %>%
select(name = town, date, cases) %>%
mutate(level = "town")
) %>%
filter(date == date_range[2], cases >= reg_thresh, level != "noid") %>%
mutate(level = as_factor(level) %>%
fct_relevel("state", "county", "town", "noid")) %>%
left_join(town_county, by = c("name" = "town")) %>%
left_join(pops %>% select(-level), by = "name") %>%
# replace_na(list(county = "N/A")) %>%
mutate(`Cases per 10k residents` = round(cases / total_pop * 1e4, digits = 1)) %>%
arrange(level, county, name) %>%
select(county, name, cases, `Cases per 10k residents`) %>%
rename_all(str_to_sentence)
datatable(counts_table,
options = list(searching = FALSE, rowGroup = list(dataSrc = 0, emptyDataGroup = "State / counties")),
rownames = FALSE) %>%
formatRound("Cases", digits = 0) %>%
formatRound(4, digits = 1)
pop_race <- read_csv("input_data/race18.csv") %>%
select(name, race, total_pop = estimate)
case_by_race <- read_csv("input_data/covid_ct_race.csv") %>%
mutate(race = as_factor(race) %>%
fct_relabel(str_remove, "NH ") %>%
fct_recode(Latino = "Hispanic"),
date = mdy(date),
name = "Connecticut") %>%
inner_join(pop_race, by = c("name", "race")) %>%
filter(date == max(date))
race_date <- unique(case_by_race$date)
race_date_fmt <- format(race_date, "%m/%d/%Y")
rates_by_race <- bind_rows(
case_by_race %>% mutate(race = "Average"),
case_by_race
) %>%
group_by(name, date, race) %>%
summarise_at(vars(cases, deaths, total_pop), sum) %>%
mutate_at(vars(cases, deaths), list(rate_10k = ~round(. / total_pop * 1e4, digits = 1))) %>%
ungroup() %>%
filter(race != "Other") %>%
mutate(race = as_factor(race) %>%
fct_reorder(cases_rate_10k, .desc = TRUE) %>%
fct_relevel("Average")) %>%
arrange(race)
race_pal <- setNames(c("#888888", pal[c(2, 4, 9, 3)]), levels(rates_by_race$race))
billboarder(data = rates_by_race, height = 350) %>%
bb_barchart(mapping = bbaes(x = race, y = cases_rate_10k, group = race), stack = TRUE, width = list(ratio = 0.5)) %>%
bb_colors_manual(race_pal) %>%
bb_legend(hide = TRUE) %>%
bb_y_axis(label = list(text = "Cases per 10k", position = "outer-top"))
billboarder(list(), data = rates_by_race, height = 350) %>%
bb_barchart(mapping = bbaes(x = race, y = deaths_rate_10k, group = race), stack = TRUE, width = list(ratio = 0.5)) %>%
bb_colors_manual(race_pal) %>%
bb_legend(hide = TRUE) %>%
bb_y_axis(label = list(text = "Deaths per 10k", position = "outer-top"))
county_to_plot %>%
filter(name != "Connecticut") %>%
arrange(date, name) %>%
billboarder(list(data = list(order = "asc")), data = ., height = 400) %>%
bb_barchart(mapping = bbaes(x = date, y = cases, group = name), stacked = TRUE) %>%
bb_x_axis(label = list(text = NULL), type = "timeseries",
tick = list(format = "%m/%d", values = mondays)) %>%
bb_y_axis(label = list(text = "Cases", position = "outer-top"),
tick = list(format = htmlwidgets::JS("d3.format(',')"))) %>%
bb_x_grid(show = TRUE) %>%
bb_y_grid(show = TRUE) %>%
bb_colors_manual(pal) %>%
bb_legend(position = "right") %>%
bb_tooltip(grouped = FALSE) %>%
bb_title(padding = list(bottom = 20, top = 10), position = "top-left")
rad_scale <- function(x, max_rad = 25) {
s <- sqrt(x)
s / max(s) * max_rad
}
map_lbllr <- function(name, rate_10k, cases) {
paste(
htmltools::h5(name),
htmltools::div(str_glue("Rate: {rate_10k} per 10k")),
htmltools::div(str_glue("{cases} cases"))
) %>%
htmltools::htmlEscape()
}
map_thresh <- 10
town_sf <- readRDS("input_data/town_sf.rds")
cases_sf <- town_sf %>%
left_join(town %>% filter(date == date_range[2]), by = c("name" = "town")) %>%
left_join(pops %>% select(name, total_pop), by = "name") %>%
mutate(rate_10k = round(cases / total_pop * 1e4, digits = 1))
bbox <- town_sf %>%
sf::st_buffer(1e-2) %>%
sf::st_bbox() %>%
as.numeric()
# color_scale <- colorBin(seq_pal, cases_sf$rate_10k, bins = 5)
leaflet(cases_sf, width = "100%", height = 500,
options = leafletOptions(zoomSnap = 0.25, zoomDelta = 0.5, scrollWheelZoom = FALSE)) %>%
setMaxBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = "#999999", fillColor = "#aaaaaa", weight = 1, fillOpacity = 0.1) %>%
addCircleMarkers(data = sf::st_centroid(cases_sf),
radius = ~rad_scale(rate_10k), color = seq_pal[5],
weight = 0, opacity = 0.8, fillOpacity = 0.4,
# label = ~str_glue("{name}: {rate_10k}"),
label = ~str_glue("{name}: {rate_10k} per 10k ({cases} cases)"),
labelOptions = labelOptions(className = "tooltip", direction = "top", offset = c(0, -20)))
chor_brks <- ceiling(classInt::classIntervals(cases_sf$rate_10k, n = 5, style = "jenks")$brk)
chor_pal <- colorBin(RColorBrewer::brewer.pal(5, "BuPu"), domain = cases_sf$rate_10k, bins = chor_brks)
leaflet(cases_sf, width = "100%", height = 500,
options = leafletOptions(zoomSnap = 0.25, zoomDelta = 0.5, scrollWheelZoom = FALSE)) %>%
setMaxBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = "#333333", weight = 0.6, fillOpacity = 0.8,
fillColor = ~chor_pal(rate_10k),
label = ~str_glue("{name}: {rate_10k} per 10k ({cases} cases)"),
labelOptions = labelOptions(className = "tooltip", direction = "top", offset = c(0, -20)),
highlightOptions = highlightOptions(fillOpacity = 1, bringToFront = TRUE, weight = 2)) %>%
addLegend("bottomright", pal = chor_pal, values = ~rate_10k, opacity = 0.9, title = "Rate per 10k")
test_x_cases <- county %>%
inner_join(tests, by = c("name", "date")) %>%
# filter(date == date_range[2]) %>%
select(-level) %>%
pivot_longer(-c(date, name), names_to = "measure") %>%
mutate(measure = as_factor(measure) %>%
fct_relevel("tests", "cases", "hospitalizations") %>%
fct_recode("detected cases" = "cases", "individuals tested" = "tests") %>%
fct_relabel(str_to_sentence)) %>%
filter(!is.na(value)) %>%
arrange(measure)
billboarder(data = test_x_cases, height = 450) %>%
bb_linechart(mapping = bbaes(x = date, y = value, group = measure), type = "step") %>%
bb_x_axis(label = list(text = NULL), type = "timeseries",
tick = list(format = "%m/%d", values = mondays)) %>%
bb_y_axis(label = list(text = "Count", position = "outer-top"),
tick = list(format = htmlwidgets::JS("d3.format(',')")),
padding = list(bottom = 0)) %>%
bb_x_grid(show = TRUE) %>%
bb_y_grid(show = TRUE) %>%
bb_colors_manual(purrr::set_names(pal[2:5], levels(test_x_cases$measure))) %>%
bb_legend(position = "right") %>%
# bb_tooltip(grouped = FALSE) %>%
bb_title(padding = list(bottom = 20, top = 10), position = "top-left")
# only including if each 5-day period involves more than N cases; otherwise have things like increases of 1700%
t5_thresh <- 10
elapsed <- county %>%
mutate(days_ago = (date_range[2] - date) %>%
str_pad(width = 2, side = "left", pad = "0") %>%
paste0("t", .))
dates_elapsed <- elapsed %>%
distinct(days_ago, date) %>%
mutate(date = format(date, "%m/%d")) %>%
tibble::deframe()
case_change <- elapsed %>%
filter(level != "noid", days_ago %in% c("t00", "t05", "t10")) %>%
select(days_ago, level, name, cases) %>%
pivot_wider(names_from = days_ago, values_from = cases) %>%
mutate(new_cases_t05_t10 = t05 - t10,
new_cases_t00_t05 = t00 - t05,
pct_change = (new_cases_t00_t05 - new_cases_t05_t10) / new_cases_t05_t10) %>%
filter_at(vars(starts_with("new_cases")), ~ . >= t5_thresh)
change_table <- case_change %>%
arrange(level, name) %>%
select(-matches("^t\\d")) %>%
pivot_longer(-c(level, name), names_to = "variable") %>%
extract(variable, into = c("type", "end", "start"), "(^\\w+)_(t\\d{2})_(t\\d{2}$)", remove = FALSE) %>%
mutate_at(vars(end, start), recode, !!!dates_elapsed) %>%
mutate(type = coalesce(type, variable),
lbl = ifelse(is.na(end), type, str_glue("{type}, {start} to {end}")) %>%
clean_titles(),
name = ifelse(level == "county", paste(name, "County"), as.character(name))) %>%
select(Name = name, lbl, value) %>%
pivot_wider(names_from = lbl)
# datatable(change_table,
#           options = list(searching = FALSE, order = list(list(4, "desc"))),
#           rownames = FALSE) %>%
#   formatRound(2:3, digits = 0) %>%
#   formatPercentage(4)
datatable(change_table,
options = list(searching = FALSE, paging = FALSE, info = FALSE),
rownames = FALSE) %>%
formatRound(2:3, digits = 0) %>%
formatPercentage(4)
exec_orders <- tibble::tribble(
~date, ~order,
"2020-03-24", "Non-essential business closures",
"2020-03-17", "Restrictions on gatherings"
) %>%
mutate(date = as.Date(date),
lbl = str_glue("{format(date, '%m/%d')}: {order}")) %>%
split(seq_along(.$date)) %>%
purrr::map(function(x) list(value = x$date, text = x$order, class = "milestone"))
mob <- read_csv("https://raw.githubusercontent.com/descarteslabs/DL-COVID-19/master/DL-us-mobility-daterow.csv")  %>%
filter(admin_level == 0 | fips == "09" | admin1 == "Connecticut") %>%
arrange(admin_level) %>%
mutate(name = coalesce(admin2, admin1, as.character(admin_level)) %>%
as_factor() %>%
fct_recode(US = "0"),
m50_miles = round(measurements::conv_unit(m50, "km", "mi"), digit = 1)) %>%
select(level = admin_level, name, date, samples, m50_miles, m50_index) %>%
mutate(wkday = lubridate::wday(date, label = F)) %>%
filter(between(wkday, 2, 6)) %>%
filter(name %in% c("US", "Connecticut", "New Haven County"))
mob_date_range <- range(mob$date)
# mob_pal <- c(pal[c(3, 5, 7)], "gray50") %>% setNames(levels(mob$name2))
mob_pal <- c(pal[c(3, 4, 9)], rep("gray50", 7)) %>%
setNames(c(c("US", "Connecticut", "New Haven County"), setdiff(levels(mob$name), c("US", "Connecticut", "New Haven County"))))
# mob_legend <- "function(name, color) {
#   return ['US', 'Connecticut', 'New Haven County'].indexOf(name) !== -1 ? '<span>' + name + '</span>' : '';
# }"
billboarder(data = mob, height = 450) %>%
bb_linechart(mapping = bbaes(x = date, y = m50_miles, group = name)) %>%
bb_x_axis(label = list(text = NULL), type = "timeseries",
tick = list(format = "%m/%d", values = mondays[mondays <= max(mob$date)])) %>%
bb_y_axis(label = list(text = "Avg. mobility (miles)", position = "outer-top")) %>%
bb_x_grid(show = TRUE,
lines = list(exec_orders$`1`, exec_orders$`2`)) %>%
bb_y_grid(show = TRUE) %>%
bb_colors_manual(mob_pal) %>%
bb_legend(position = "right") %>%
bb_tooltip()
devtools::release()
install.packages("devtools")
devtools::release()
devtools::spell_check()
?devtools::release()
?remotes::install_deps
getOption("repos")
getOption("type")
getOption("pkgType")
